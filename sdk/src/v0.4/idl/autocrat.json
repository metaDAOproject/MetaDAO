{
  "address": "autowMzCbM29YXMgVG3T62Hkgo7RcyrvgQQkd54fDQL",
  "metadata": {
    "name": "autocrat",
    "version": "0.4.0",
    "spec": "0.1.0",
    "description": "SVM-based program for running futarchy"
  },
  "instructions": [
    {
      "name": "execute_proposal",
      "discriminator": [
        186,
        60,
        116,
        133,
        108,
        128,
        111,
        28
      ],
      "accounts": [
        {
          "name": "proposal",
          "writable": true
        },
        {
          "name": "dao",
          "relations": [
            "proposal"
          ]
        }
      ],
      "args": []
    },
    {
      "name": "finalize_proposal",
      "discriminator": [
        23,
        68,
        51,
        167,
        109,
        173,
        187,
        164
      ],
      "accounts": [
        {
          "name": "proposal",
          "writable": true
        },
        {
          "name": "pass_amm",
          "relations": [
            "proposal"
          ]
        },
        {
          "name": "fail_amm",
          "relations": [
            "proposal"
          ]
        },
        {
          "name": "dao",
          "relations": [
            "proposal"
          ]
        },
        {
          "name": "question",
          "writable": true,
          "relations": [
            "proposal"
          ]
        },
        {
          "name": "treasury",
          "relations": [
            "dao"
          ]
        },
        {
          "name": "pass_lp_user_account",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "account",
                "path": "proposal.proposer",
                "account": "Proposal"
              },
              {
                "kind": "const",
                "value": [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                "kind": "account",
                "path": "pass_amm.lp_mint",
                "account": "Amm"
              }
            ],
            "program": {
              "kind": "const",
              "value": [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          "name": "fail_lp_user_account",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "account",
                "path": "proposal.proposer",
                "account": "Proposal"
              },
              {
                "kind": "const",
                "value": [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                "kind": "account",
                "path": "fail_amm.lp_mint",
                "account": "Amm"
              }
            ],
            "program": {
              "kind": "const",
              "value": [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          "name": "pass_lp_vault_account",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "account",
                "path": "dao.treasury",
                "account": "Dao"
              },
              {
                "kind": "const",
                "value": [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                "kind": "account",
                "path": "pass_amm.lp_mint",
                "account": "Amm"
              }
            ],
            "program": {
              "kind": "const",
              "value": [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          "name": "fail_lp_vault_account",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "account",
                "path": "dao.treasury",
                "account": "Dao"
              },
              {
                "kind": "const",
                "value": [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                "kind": "account",
                "path": "fail_amm.lp_mint",
                "account": "Amm"
              }
            ],
            "program": {
              "kind": "const",
              "value": [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          "name": "token_program",
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "vault_program",
          "address": "VLTX1ishMBbcX3rdBWGssxawAo1Q2X2qxYFYqiGodVg"
        },
        {
          "name": "vault_event_authority"
        }
      ],
      "args": []
    },
    {
      "name": "initialize_dao",
      "discriminator": [
        128,
        226,
        96,
        90,
        39,
        56,
        24,
        196
      ],
      "accounts": [
        {
          "name": "dao",
          "writable": true,
          "signer": true
        },
        {
          "name": "payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "token_mint"
        },
        {
          "name": "usdc_mint"
        }
      ],
      "args": [
        {
          "name": "params",
          "type": {
            "defined": {
              "name": "InitializeDaoParams"
            }
          }
        }
      ]
    },
    {
      "name": "initialize_proposal",
      "discriminator": [
        50,
        73,
        156,
        98,
        129,
        149,
        21,
        158
      ],
      "accounts": [
        {
          "name": "proposal",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  112,
                  114,
                  111,
                  112,
                  111,
                  115,
                  97,
                  108
                ]
              },
              {
                "kind": "account",
                "path": "proposer"
              },
              {
                "kind": "arg",
                "path": "args.nonce"
              }
            ]
          }
        },
        {
          "name": "dao",
          "writable": true
        },
        {
          "name": "question",
          "relations": [
            "quote_vault",
            "base_vault"
          ]
        },
        {
          "name": "quote_vault"
        },
        {
          "name": "base_vault"
        },
        {
          "name": "pass_amm"
        },
        {
          "name": "pass_lp_mint"
        },
        {
          "name": "fail_lp_mint"
        },
        {
          "name": "fail_amm"
        },
        {
          "name": "pass_lp_user_account",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "account",
                "path": "proposer"
              },
              {
                "kind": "const",
                "value": [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                "kind": "account",
                "path": "pass_amm.lp_mint",
                "account": "Amm"
              }
            ],
            "program": {
              "kind": "const",
              "value": [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          "name": "fail_lp_user_account",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "account",
                "path": "proposer"
              },
              {
                "kind": "const",
                "value": [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                "kind": "account",
                "path": "fail_amm.lp_mint",
                "account": "Amm"
              }
            ],
            "program": {
              "kind": "const",
              "value": [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          "name": "pass_lp_vault_account",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "account",
                "path": "dao.treasury",
                "account": "Dao"
              },
              {
                "kind": "const",
                "value": [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                "kind": "account",
                "path": "pass_amm.lp_mint",
                "account": "Amm"
              }
            ],
            "program": {
              "kind": "const",
              "value": [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          "name": "fail_lp_vault_account",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "account",
                "path": "dao.treasury",
                "account": "Dao"
              },
              {
                "kind": "const",
                "value": [
                  6,
                  221,
                  246,
                  225,
                  215,
                  101,
                  161,
                  147,
                  217,
                  203,
                  225,
                  70,
                  206,
                  235,
                  121,
                  172,
                  28,
                  180,
                  133,
                  237,
                  95,
                  91,
                  55,
                  145,
                  58,
                  140,
                  245,
                  133,
                  126,
                  255,
                  0,
                  169
                ]
              },
              {
                "kind": "account",
                "path": "fail_amm.lp_mint",
                "account": "Amm"
              }
            ],
            "program": {
              "kind": "const",
              "value": [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          "name": "proposer",
          "writable": true,
          "signer": true
        },
        {
          "name": "token_program",
          "address": "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "params",
          "type": {
            "defined": {
              "name": "InitializeProposalParams"
            }
          }
        }
      ]
    },
    {
      "name": "update_dao",
      "discriminator": [
        131,
        72,
        75,
        25,
        112,
        210,
        109,
        2
      ],
      "accounts": [
        {
          "name": "dao",
          "writable": true
        },
        {
          "name": "treasury",
          "signer": true,
          "relations": [
            "dao"
          ]
        }
      ],
      "args": [
        {
          "name": "dao_params",
          "type": {
            "defined": {
              "name": "UpdateDaoParams"
            }
          }
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "Amm",
      "discriminator": [
        143,
        245,
        200,
        17,
        74,
        214,
        196,
        135
      ]
    },
    {
      "name": "ConditionalVault",
      "discriminator": [
        63,
        132,
        87,
        98,
        36,
        51,
        175,
        247
      ]
    },
    {
      "name": "Dao",
      "discriminator": [
        163,
        9,
        47,
        31,
        52,
        85,
        197,
        49
      ]
    },
    {
      "name": "Proposal",
      "discriminator": [
        26,
        94,
        189,
        187,
        116,
        136,
        53,
        33
      ]
    },
    {
      "name": "Question",
      "discriminator": [
        111,
        22,
        150,
        220,
        181,
        122,
        118,
        127
      ]
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "AmmTooOld",
      "msg": "Amms must have been created within 5 minutes (counted in slots) of proposal initialization"
    },
    {
      "code": 6001,
      "name": "InvalidInitialObservation",
      "msg": "An amm has an `initial_observation` that doesn't match the `dao`'s config"
    },
    {
      "code": 6002,
      "name": "InvalidMaxObservationChange",
      "msg": "An amm has a `max_observation_change_per_update` that doesn't match the `dao`'s config"
    },
    {
      "code": 6003,
      "name": "InvalidSettlementAuthority",
      "msg": "One of the vaults has an invalid `settlement_authority`"
    },
    {
      "code": 6004,
      "name": "ProposalTooYoung",
      "msg": "Proposal is too young to be executed or rejected"
    },
    {
      "code": 6005,
      "name": "MarketsTooYoung",
      "msg": "Markets too young for proposal to be finalized. TWAP might need to be cranked"
    },
    {
      "code": 6006,
      "name": "ProposalAlreadyFinalized",
      "msg": "This proposal has already been finalized"
    },
    {
      "code": 6007,
      "name": "InvalidVaultNonce",
      "msg": "A conditional vault has an invalid nonce. A nonce should encode the proposal number"
    },
    {
      "code": 6008,
      "name": "ProposalNotPassed",
      "msg": "This proposal can't be executed because it isn't in the passed state"
    },
    {
      "code": 6009,
      "name": "InsufficientLpTokenBalance",
      "msg": "The proposer has fewer pass or fail LP tokens than they requested to lock"
    },
    {
      "code": 6010,
      "name": "InsufficientLpTokenLock",
      "msg": "The LP tokens passed in have less liquidity than the DAO's `min_quote_futarchic_liquidity` or `min_base_futachic_liquidity`"
    }
  ],
  "types": [
    {
      "name": "Amm",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "bump",
            "type": "u8"
          },
          {
            "name": "created_at_slot",
            "type": "u64"
          },
          {
            "name": "lp_mint",
            "type": "pubkey"
          },
          {
            "name": "base_mint",
            "type": "pubkey"
          },
          {
            "name": "quote_mint",
            "type": "pubkey"
          },
          {
            "name": "base_mint_decimals",
            "type": "u8"
          },
          {
            "name": "quote_mint_decimals",
            "type": "u8"
          },
          {
            "name": "base_amount",
            "type": "u64"
          },
          {
            "name": "quote_amount",
            "type": "u64"
          },
          {
            "name": "oracle",
            "type": {
              "defined": {
                "name": "TwapOracle"
              }
            }
          },
          {
            "name": "seq_num",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "ConditionalVault",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "question",
            "type": "pubkey"
          },
          {
            "name": "underlying_token_mint",
            "type": "pubkey"
          },
          {
            "name": "underlying_token_account",
            "type": "pubkey"
          },
          {
            "name": "conditional_token_mints",
            "type": {
              "vec": "pubkey"
            }
          },
          {
            "name": "pda_bump",
            "type": "u8"
          },
          {
            "name": "decimals",
            "type": "u8"
          },
          {
            "name": "seq_num",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "Dao",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "treasury_pda_bump",
            "type": "u8"
          },
          {
            "name": "treasury",
            "type": "pubkey"
          },
          {
            "name": "token_mint",
            "type": "pubkey"
          },
          {
            "name": "usdc_mint",
            "type": "pubkey"
          },
          {
            "name": "proposal_count",
            "type": "u32"
          },
          {
            "name": "pass_threshold_bps",
            "type": "u16"
          },
          {
            "name": "slots_per_proposal",
            "type": "u64"
          },
          {
            "name": "twap_initial_observation",
            "docs": [
              "For manipulation-resistance the TWAP is a time-weighted average observation,",
              "where observation tries to approximate price but can only move by",
              "`twap_max_observation_change_per_update` per update. Because it can only move",
              "a little bit per update, you need to check that it has a good initial observation.",
              "Otherwise, an attacker could create a very high initial observation in the pass",
              "market and a very low one in the fail market to force the proposal to pass.",
              "",
              "We recommend setting an initial observation around the spot price of the token,",
              "and max observation change per update around 2% the spot price of the token.",
              "For example, if the spot price of META is $400, we'd recommend setting an initial",
              "observation of 400 (converted into the AMM prices) and a max observation change per",
              "update of 8 (also converted into the AMM prices). Observations can be updated once",
              "a minute, so 2% allows the proposal market to reach double the spot price or 0",
              "in 50 minutes."
            ],
            "type": "u128"
          },
          {
            "name": "twap_max_observation_change_per_update",
            "type": "u128"
          },
          {
            "name": "min_quote_futarchic_liquidity",
            "docs": [
              "As an anti-spam measure and to help liquidity, you need to lock up some liquidity",
              "in both futarchic markets in order to create a proposal.",
              "",
              "For example, for META, we can use a `min_quote_futarchic_liquidity` of",
              "5000 * 1_000_000 (5000 USDC) and a `min_base_futarchic_liquidity` of",
              "10 * 1_000_000_000 (10 META)."
            ],
            "type": "u64"
          },
          {
            "name": "min_base_futarchic_liquidity",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "InitializeDaoParams",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "twap_initial_observation",
            "type": "u128"
          },
          {
            "name": "twap_max_observation_change_per_update",
            "type": "u128"
          },
          {
            "name": "min_quote_futarchic_liquidity",
            "type": "u64"
          },
          {
            "name": "min_base_futarchic_liquidity",
            "type": "u64"
          },
          {
            "name": "pass_threshold_bps",
            "type": {
              "option": "u16"
            }
          },
          {
            "name": "slots_per_proposal",
            "type": {
              "option": "u64"
            }
          }
        ]
      }
    },
    {
      "name": "InitializeProposalParams",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "description_url",
            "type": "string"
          },
          {
            "name": "instruction",
            "type": {
              "defined": {
                "name": "ProposalInstruction"
              }
            }
          },
          {
            "name": "pass_lp_tokens_to_lock",
            "type": "u64"
          },
          {
            "name": "fail_lp_tokens_to_lock",
            "type": "u64"
          },
          {
            "name": "nonce",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "Proposal",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "number",
            "type": "u32"
          },
          {
            "name": "proposer",
            "type": "pubkey"
          },
          {
            "name": "description_url",
            "type": "string"
          },
          {
            "name": "slot_enqueued",
            "type": "u64"
          },
          {
            "name": "state",
            "type": {
              "defined": {
                "name": "ProposalState"
              }
            }
          },
          {
            "name": "instruction",
            "type": {
              "defined": {
                "name": "ProposalInstruction"
              }
            }
          },
          {
            "name": "pass_amm",
            "type": "pubkey"
          },
          {
            "name": "fail_amm",
            "type": "pubkey"
          },
          {
            "name": "base_vault",
            "type": "pubkey"
          },
          {
            "name": "quote_vault",
            "type": "pubkey"
          },
          {
            "name": "dao",
            "type": "pubkey"
          },
          {
            "name": "pass_lp_tokens_locked",
            "type": "u64"
          },
          {
            "name": "fail_lp_tokens_locked",
            "type": "u64"
          },
          {
            "name": "nonce",
            "docs": [
              "We need to include a per-proposer nonce to prevent some weird proposal",
              "front-running edge cases. Using a `u64` means that proposers are unlikely",
              "to run into collisions, even if they generate nonces randomly - I've run",
              "the math :D"
            ],
            "type": "u64"
          },
          {
            "name": "pda_bump",
            "type": "u8"
          },
          {
            "name": "question",
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "ProposalAccount",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "pubkey",
            "type": "pubkey"
          },
          {
            "name": "is_signer",
            "type": "bool"
          },
          {
            "name": "is_writable",
            "type": "bool"
          }
        ]
      }
    },
    {
      "name": "ProposalInstruction",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "program_id",
            "type": "pubkey"
          },
          {
            "name": "accounts",
            "type": {
              "vec": {
                "defined": {
                  "name": "ProposalAccount"
                }
              }
            }
          },
          {
            "name": "data",
            "type": "bytes"
          }
        ]
      }
    },
    {
      "name": "ProposalState",
      "type": {
        "kind": "enum",
        "variants": [
          {
            "name": "Pending"
          },
          {
            "name": "Passed"
          },
          {
            "name": "Failed"
          },
          {
            "name": "Executed"
          }
        ]
      }
    },
    {
      "name": "Question",
      "docs": [
        "Questions represent statements about future events.",
        "",
        "These statements include:",
        "- \"Will this proposal pass?\"",
        "- \"Who, if anyone, will be hired?\"",
        "- \"How effective will the grant committee deem this grant?\"",
        "",
        "Questions have 2 or more possible outcomes. For a question like \"will this",
        "proposal pass,\" the outcomes are \"yes\" and \"no.\" For a question like \"who",
        "will be hired,\" the outcomes could be \"Alice,\" \"Bob,\" and \"neither.\"",
        "",
        "Outcomes resolve to a number between 0 and 1. Binary questions like \"will",
        "this proposal pass\" have outcomes that resolve to exactly 0 or 1. You can",
        "also have questions with scalar outcomes. For example, the question \"how",
        "effective will the grant committee deem this grant\" could have two outcomes:",
        "\"ineffective\" and \"effective.\" If the grant committee deems the grant 70%",
        "effective, the \"effective\" outcome would resolve to 0.7 and the \"ineffective\"",
        "outcome would resolve to 0.3.",
        "",
        "Once resolved, the sum of all outcome resolutions is exactly 1."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "question_id",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "oracle",
            "type": "pubkey"
          },
          {
            "name": "payout_numerators",
            "type": {
              "vec": "u32"
            }
          },
          {
            "name": "payout_denominator",
            "type": "u32"
          }
        ]
      }
    },
    {
      "name": "TwapOracle",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "last_updated_slot",
            "type": "u64"
          },
          {
            "name": "last_price",
            "docs": [
              "A price is the number of quote units per base unit multiplied by 1e12.",
              "You cannot simply divide by 1e12 to get a price you can display in the UI",
              "because the base and quote decimals may be different. Instead, do:",
              "ui_price = (price * (10**(base_decimals - quote_decimals))) / 1e12"
            ],
            "type": "u128"
          },
          {
            "name": "last_observation",
            "docs": [
              "If we did a raw TWAP over prices, someone could push the TWAP heavily with",
              "a few extremely large outliers. So we use observations, which can only move",
              "by `max_observation_change_per_update` per update."
            ],
            "type": "u128"
          },
          {
            "name": "aggregator",
            "docs": [
              "Running sum of slots_per_last_update * last_observation.",
              "",
              "Assuming latest observations are as big as possible (u64::MAX * 1e12),",
              "we can store 18 million slots worth of observations, which turns out to",
              "be ~85 days worth of slots.",
              "",
              "Assuming that latest observations are 100x smaller than they could theoretically",
              "be, we can store 8500 days (23 years) worth of them. Even this is a very",
              "very conservative assumption - META/USDC prices should be between 1e9 and",
              "1e15, which would overflow after 1e15 years worth of slots.",
              "",
              "So in the case of an overflow, the aggregator rolls back to 0. It's the",
              "client's responsibility to sanity check the assets or to handle an",
              "aggregator at T2 being smaller than an aggregator at T1."
            ],
            "type": "u128"
          },
          {
            "name": "max_observation_change_per_update",
            "docs": [
              "The most that an observation can change per update."
            ],
            "type": "u128"
          },
          {
            "name": "initial_observation",
            "docs": [
              "What the initial `latest_observation` is set to."
            ],
            "type": "u128"
          }
        ]
      }
    },
    {
      "name": "UpdateDaoParams",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "pass_threshold_bps",
            "type": {
              "option": "u16"
            }
          },
          {
            "name": "slots_per_proposal",
            "type": {
              "option": "u64"
            }
          },
          {
            "name": "twap_initial_observation",
            "type": {
              "option": "u128"
            }
          },
          {
            "name": "twap_max_observation_change_per_update",
            "type": {
              "option": "u128"
            }
          },
          {
            "name": "min_quote_futarchic_liquidity",
            "type": {
              "option": "u64"
            }
          },
          {
            "name": "min_base_futarchic_liquidity",
            "type": {
              "option": "u64"
            }
          }
        ]
      }
    }
  ]
}